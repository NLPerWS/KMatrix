{"lineList": [{"from": "kehpw9q4jj", "label": "knowledge_info -> knowledge_info", "label_from": "knowledge_info", "label_from_outputList": ["knowledge_info"], "label_to": "knowledge_info", "label_to_inputList": ["query_obj", "knowledge_info", "test_data_info", "train_data_info", "dev_data_info"], "to": "fg9oz5lgf"}, {"from": "f8hlrppuse", "label": "value -> query_obj", "label_from": "value", "label_from_outputList": ["value"], "label_to": "query_obj", "label_to_inputList": ["query_obj", "knowledge_info", "test_data_info", "train_data_info", "dev_data_info"], "to": "fg9oz5lgf"}, {"from": "fg9oz5lgf", "label": "final_result -> retriever_list", "label_from": "final_result", "label_from_outputList": ["final_result"], "label_to": "retriever_list", "label_to_inputList": ["query_obj", "retriever_list"], "to": "nxnivt8mdf"}, {"from": "f8hlrppuse", "label": "value -> query_obj", "label_from": "value", "label_from_outputList": ["value"], "label_to": "query_obj", "label_to_inputList": ["query_obj", "retriever_list"], "to": "nxnivt8mdf"}, {"from": "nxnivt8mdf", "label": "prompt_obj -> query_obj", "label_from": "prompt_obj", "label_from_outputList": ["prompt_obj"], "label_to": "query_obj", "label_to_inputList": ["query_obj", "train_data_info", "dev_data_info"], "to": "8wi33ai056"}, {"from": "8wi33ai056", "label": "final_result -> checkData", "label_from": "final_result", "label_from_outputList": ["final_result"], "label_to": "checkData", "label_to_inputList": ["checkData"], "to": "pkuwgkz2i6"}, {"from": "pkuwgkz2i6", "label": "no -> value", "label_from": "no", "label_from_outputList": ["yes", "no"], "label_to": "value", "label_to_inputList": ["value"], "to": "f8hlrppuse"}, {"from": "km1qon217", "label": "dataset_info -> dataset_info", "label_from": "dataset_info", "label_from_outputList": ["dataset_info"], "label_to": "dataset_info", "label_to_inputList": ["dataset_info", "result"], "to": "g8a16eagw"}, {"from": "pkuwgkz2i6", "label": "yes -> result", "label_from": "yes", "label_from_outputList": ["yes", "no"], "label_to": "result", "label_to_inputList": ["dataset_info", "result"], "to": "g8a16eagw"}, {"from": "tmu1fzebyd", "to": "f8hlrppuse", "label_from": "no", "label_to": "value", "label_from_outputList": ["yes", "no"], "label_to_inputList": ["value"], "label": "no -> value"}, {"from": "g8a16eagw", "to": "tmu1fzebyd", "label_from": "final_result", "label_to": "checkData", "label_from_outputList": ["final_result"], "label_to_inputList": ["checkData"], "label": "final_result -> checkData"}], "name": "v16_eva_Iterative", "nodeList": [{"codeFilePath": "kninjllm/llm_dataloader/knowledgeLoader.py", "ico": "el-icon-time", "id": "kehpw9q4jj", "initParams": [{"name": "tag", "type": "str\n(固定)\n此知识的tag", "value": "文本数据库: wikipedia"}, {"name": "knowledge_path", "type": "str\n(固定)", "value": ""}, {"name": "elasticIndex", "type": "str\n(固定)\nES的index", "value": "wiki_pedia"}], "inputParams": [], "left": "811px", "name": "Knowledge_wikipedia", "outputParams": [{"name": "knowledge_info", "type": "Dict[str, Any]", "value": ""}], "state": "success", "top": "369px", "type": "Knowledge_wikipedia"}, {"codeFilePath": "kninjllm/llm_retriever/contriever/contriever_retriever.py", "components": [], "description": "", "ico": "el-icon-time", "id": "fg9oz5lgf", "initParams": [{"name": "model_path", "type": "str\n(可选)\n模型地址", "value": ""}, {"name": "top_k", "type": "int\n(可选)\n根据得分排序,并返回前k条", "value": 3}, {"name": "executeType", "type": "str\n(必选)\n动作类型,可选参数: \ninfer\nevaluate\ntrain", "value": "infer"}], "inputParams": [{"name": "query_obj", "type": "Dict[str, Any]", "value": ""}, {"name": "knowledge_info", "type": "Dict[str, Any]", "value": ""}, {"name": "test_data_info", "type": "Dict[str, Any]", "value": ""}, {"name": "train_data_info", "type": "Dict[str, Any]", "value": ""}, {"name": "dev_data_info", "type": "Dict[str, Any]", "value": ""}], "left": "802px", "name": "ContrieverRetriever", "outputParams": [{"name": "final_result", "type": "List[List[Dict[str, Any]]]", "value": ""}], "state": "success", "top": "563px", "type": "ContrieverRetriever"}, {"codeFilePath": "kninjllm/llm_common/mutiplexer.py", "components": [], "description": "", "ico": "el-icon-time", "id": "f8hlrppuse", "initParams": [], "inputParams": [{"name": "value", "type": "Dict[str,Any]", "value": "{\"question\":\"Please tell me the bio of Carlos DeLuna and Max Allen McCoy respectively.\"}"}], "left": "458px", "name": "Multiplexer", "outputParams": [{"name": "value", "type": "Dict[str,Any]", "value": ""}], "state": "success", "top": "243px", "type": "Multiplexer"}, {"codeFilePath": "kninjllm/llm_builder/prompt_builder.py", "components": [], "description": "Prompt generation based on the template", "ico": "el-icon-time", "id": "nxnivt8mdf", "initParams": [{"name": "template", "type": "str\n(必选)\npython的Julia2模板字符串", "value": "Answer the question based on the given document. \nOnly give me the answer and do not output any other words. \nThe following are given documents: \\n\n{% for doc in retriever_list%}\n    {{ doc['content'] }}\n{% endfor %}\n\\nQuestion: {{query_obj['question']}} \\n\nAnswer:"}], "inputParams": [{"name": "query_obj", "type": "Dict[str,Any]", "value": ""}, {"name": "retriever_list", "type": "List[List[Dict[str, Any]]]", "value": ""}], "left": "465px", "name": "PromptBuilder", "outputParams": [{"name": "prompt_obj", "type": "Dict[str, Any]", "value": ""}], "state": "success", "top": "368px", "type": "PromptBuilder"}, {"codeFilePath": "kninjllm/llm_generator/base_generator/self_rag/self_rag_generator.py", "description": "", "ico": "el-icon-time", "id": "8wi33ai056", "initParams": [{"name": "api_key", "type": "str\n(可选)", "value": ""}, {"name": "model_path", "type": "str\n(可选)", "value": ""}, {"name": "executeType", "type": "str\n(必选)\n动作类型,可选参数:\ninfer(推理)\ntrain(训练)", "value": "infer"}], "inputParams": [{"name": "query_obj", "type": "Dict[str, Any]", "value": ""}, {"name": "train_data_info", "type": "Dict[str, Any]", "value": ""}, {"name": "dev_data_info", "type": "Dict[str, Any]", "value": ""}], "left": "477px", "name": "RagGenerator", "outputParams": [{"name": "final_result", "type": "Dict[str, Any]", "value": ""}], "state": "success", "top": "588px", "type": "RagGenerator"}, {"codeFilePath": "kninjllm/llm_router/conditional_router.py", "description": "Used for IterativePipeline task to determine whether the maximum number of cycles has been reached,yes: yes no: no", "ico": "el-icon-time", "id": "pkuwgkz2i6", "initParams": [{"name": "max_loop_count", "type": "int\n(可选)\n控制流图最大循环次数,\n可以在routes中使用 temp_loop_count 和 max_loop_count 来判断流图是否到达最大循环次数", "value": 3}, {"name": "routes", "type": "str\n(固定)\nroutes数组,具体请查看文档", "value": "[{\"condition\": \"{{ temp_loop_count >= max_loop_count }}\",\"output\": \"{{ checkData }}\",\"output_name\": \"yes\",\"output_type\": Dict[str,Any]},{\"condition\": \"{{ temp_loop_count < max_loop_count}}\",\"output\": \"{{ {\\\"question\\\":checkData['query'].split('\t<=>\t')[0] + '\t<=>\t' + checkData['content']  } }}\",\"output_name\": \"no\",\"output_type\": Dict[str,Any]}]"}], "inputParams": [{"name": "checkData", "type": "Any", "value": ""}], "left": "59px", "name": "IterativeRouter", "outputParams": [{"name": "yes", "type": "str", "value": ""}, {"name": "no", "type": "str", "value": ""}], "state": "success", "top": "470px", "type": "IterativeRouter"}, {"codeFilePath": "kninjllm/llm_evaluation/evaluator.py", "description": "Used to evaluate end-to-end tasks", "ico": "el-icon-time", "id": "g8a16eagw", "initParams": [], "inputParams": [{"name": "dataset_info", "type": "Dict[str,Any]", "value": ""}, {"name": "result", "type": "Dict[str,Any]", "value": ""}], "left": "75px", "name": "Evaluator", "outputParams": [{"name": "final_result", "type": "Dict[str,Any]", "value": ""}], "state": "success", "top": "252px", "type": "Evaluator"}, {"codeFilePath": "kninjllm/llm_dataloader/dataSetLoader.py", "description": "", "ico": "el-icon-time", "id": "km1qon217", "initParams": [{"name": "dataset_path", "type": "str\n(固定)\n数据集路径", "value": "dir_dataset/ODQA_test/triviaqa_test_w_gs.jsonl"}], "inputParams": [], "left": "91px", "name": "DataSet_TriviaQA_test", "outputParams": [{"name": "dataset_info", "type": "Dict[str, Any]", "value": ""}], "state": "success", "top": "41px", "type": "DataSet_TriviaQA_test"}, {"codeFilePath": "kninjllm/llm_router/conditional_router.py", "description": "Used to determine whether the evaluation flow chart has processed all data\n Yes:yes\n No:no", "ico": "el-icon-time", "id": "tmu1fzebyd", "initParams": [{"name": "max_loop_count", "type": "int\n(selectable)\nControls the maximum number of cycles of the flow chart,\nYou can use temp_loop_count and max_loop_count in routes to determine whether the flow chart has reached the maximum number of cycles", "value": "0"}, {"name": "routes", "type": "str\n(unchanged)\nroutes array", "value": "[{\"condition\": \"{{ checkData['flag'] == 1 }}\",\"output\": \"{{ checkData['eva_result'] }}\",\"output_name\": \"yes\",\"output_type\": Dict[str,Any]},{\"condition\": \"{{  checkData['flag'] == 0 }}\",\"output\": \"{{ checkData['query_obj'] }}\",\"output_name\": \"no\",\"output_type\": Dict[str,Any]}]"}], "inputParams": [{"name": "checkData", "type": "Any", "value": ""}], "left": "461px", "name": "checkEvaluateRouter", "outputParams": [{"name": "yes", "type": "str", "value": ""}, {"name": "no", "type": "str", "value": ""}], "state": "success", "top": "18px", "type": "checkEvaluateRouter"}], "pipeLineType": "Evaluation"}